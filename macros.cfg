##### all additional macros, added in [include macros.cfg]. Some based on Ellis' https://github.com/AndrewEllis93/Print-Tuning-Guide/blob/main/macros/useful_macros.md
##### PRINT_START, PRINT_END, LOAD_FILAMENT, UNLOAD_FILAMENT, HOME_IF_NEEDED, M600, PAUSE, RESUME, CANCEL_PRINT, M109, M190


[gcode_macro PRINT_START]
gcode:
   SET_FAN_SPEED FAN=bay_fans SPEED=0.6 ;set electronics bay fans to 60%
    HOME_IF_NEEDED  
    BED_MESH_CLEAR
    {% set BED = params.BED|int %}
    {% set EXTRUDER = params.EXTRUDER|int %}
    {% set FILAMENT_TYPE = params.FILAMENT|default(PLA)|string %} ;controls if ZeroFilter is activated

    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}

    {% set intro_x = max_x/3 | int %}

    {% if intro_x < 0 %}
        { action_raise_error("Intro X is less than 0: %0.4f" % intro_x) }
    {% endif %}

    STATUS_BUSY
    M117 Starting up...
    SET_LED LED=case_leds RED=0.2 GREEN=0.2 BLUE=0.2 TRANSMIT=1
    G21                          ; set to mm
    M220 S100			 ; set print speed to 100%
    M221 S100			 ; set flow rate to 100%
    M107                         ; disable fans
    G90                          ; absolute positioning
    M83                          ; extruder to relative mode
    G92 E0                       ; set extruder to zero
  {% if FILAMENT_TYPE == "ABS" or FILAMENT_TYPE == "ASA" %} ;if ASA or ABS
	M104 S0     ; set holding hotend temp for ABS
	{% else %}
    M104 S160              ; set holding hotend temp
   {% endif %}
    M140 S{BED}                  ; set bed temp

  {% if FILAMENT_TYPE == "ABS" or FILAMENT_TYPE == "ASA" %} ;if ASA or ABS
   G1 X60 Y60 F4000	
   G1 Z40 F2000
	{% else %}

  G1 X0.5 Y0.5 F4000.0        ; move to (almost) 0,0
    G1 Z10 F2000                ; move closer to bed
    {% endif %}

    STATUS_HEATING
    M190 S{BED}                  ; wait for bed temp   
  {% if FILAMENT_TYPE == "ABS" or FILAMENT_TYPE == "ASA" %} ;if ASA or ABS
  STATUS_HEATSOAK
    G1 Z15 F2000
    M106 S255 ; set part cooling fan to 100%
  SET_FAN_SPEED FAN=zero_filter SPEED=0.3 ;set zero filter to 30% speed
    G4 P600000               ;and heat soak 
  STATUS_HEATSOAK_HALFWAY_DONE
    G4 P600000 
  {% else %}
    G1 Z0.6 F2000            ; move Z closer to hotend
  {% endif %}
 
  {% if FILAMENT_TYPE == "ABS" or FILAMENT_TYPE == "ASA" or FILAMENT_TYPE == "FLEX" %} ; if toxic material
	SET_FAN_SPEED FAN=zero_filter SPEED=1.0 ;set zero filter to 100% speed
  {% endif %}
  G28 Z0  
  BED_MESH_CALIBRATE
    G1 X0.5 Y0.5 F4000.0        ; move back to purge line location
    M109 S{EXTRUDER}             ; set & wait for extruder temp
    
    G1 X0.5 Y0.5 F4000.0        ; move back to purge line location
    G1 Z0.6 F2000             ; move Z closer to hotend
  
    STATUS_PRINTING
  M106 S0 ; turn part cooling fan off  
  G92 E0.0
    G1 Z0.3 
    G1 X{intro_x} E10 F800.0      ; intro line
    G92 E0.0
    M400                         ; clear buffer
    M117
    #UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=10
    ;SET_SKEW XY=141.62,141.11,99.92

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customize for your slicer of choice
gcode:
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-4.0 F3600                 ; retract filament
    G91                            ; relative positioning

    #   Get Boundaries
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}

    #   Check end position to determine safe direction to move
    {% if printer.toolhead.position.x < (max_x - 20) %}
        {% set x_safe = 20.0 %}
    {% else %}
        {% set x_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.y < (max_y - 20) %}
        {% set y_safe = 20.0 %}
    {% else %}
        {% set y_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.z < (max_z - 5) %}
        {% set z_safe = 5.0 %}
    {% else %}
        {% set z_safe = max_z - printer.toolhead.position.z %}
    {% endif %}
    G0 Z{z_safe} F3600             ; move nozzle up
    G0 X{x_safe} Y{y_safe} F20000  ; move nozzle to remove stringing
    ;TURN_OFF_HEATERS
    M104 S0 ; set hotend temp to zero
    SET_FAN_SPEED FAN=zero_filter SPEED=0.5 ; filter to half speed
    M107                           ; turn off fan
    G90                            ; absolute positioning
    G0 X65 Y118 F3600          ; park nozzle at rear (removed {y_max})
   {% if FILAMENT_TYPE == "ABS" or FILAMENT_TYPE == "ASA" or FILAMENT_TYPE == "FLEX" %} ; if toxic material
    M140 S85 ; slowly decrease bed temp to prevent warping. 
    G4 P300000 ; 5 minutes
   ; SET_FAN_SPEED FAN=zero_filter SPEED=0.5 ;set zero filter to 50% until COOLDOWN turns it off at 45c
  {% endif %}
    M140 S0 ; turn off bed
   SET_FAN_SPEED FAN=bay_fans SPEED=0 ;set fan speed to off
    COOLDOWN

[gcode_macro LOAD_FILAMENT]
#
# LOAD_FILAMENT
#
# Heat to 230Â°C then prime the nozzle
description: Load filament (heat nozzle if necessary)
gcode:
  HOME_IF_NEEDED
  G90 ; absolute positioning
  G1 X60 Y10 F4000 ; move move to give indicator of macro activated
  G1 X60 Y0 F4000 ; move toolhead to front
   M117 Loading filament...
   {% if printer[printer.toolhead.extruder].temperature < 230.0 %}
   STATUS_HEATING
   M117 Heating hotend...
   SET_HEATER_TEMPERATURE HEATER='extruder' TARGET=230
   TEMPERATURE_WAIT SENSOR='extruder' MINIMUM=230
   {%endif%}
   STATUS_BUSY
  G92 E0 
   M117 Loading filament...
   M83                            ; set extruder to relative
   G1 E40 F300                    ;grab the filament 
   G1 E70 F500                    ; slower extrusion for hotend path
   G1 E50 F150                    ; prime nozzle with filament
   M400        ; wait for current actions to finish
  G92 E0              ;reset extruder position to zer0
   M82                            ; set extruder to absolute
  M104 S0                         ; turn hotend off
 ;  SET_HEATER_TEMPERATURE HEATER='extruder' TARGET=160
 ;   UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=10
   STATUS_READY

    

[gcode_macro UNLOAD_FILAMENT]
  
gcode: 
  HOME_IF_NEEDED
  G90 ; absolute positioning 
  M83    ; set extruder to relative
  G1 Z25 F1500 ; move to accessable position
  G1 X60 Y10 F4000 ; move move to give indicator of macro activated
  G1 X60 Y0 F4000 ; move toolhead to front
  M400             ; wait for next move (temp)
  M109 S230  ; set nozzle to load temp
  G1 E10 F600         ;push back the filament to smash any stringing 
  G1 E-15 F3600      ;Extract back fast in the cold zone 
  G1 E-100 F500        ;Continue extraction slowly, allow the filament time to cool solid before it reaches the gears
  M104 S160                   ; set nozzle to idle temp
  G92 E0                ;reset extruder position to zero
  M82                            ; set extruder to absolute

[gcode_macro HOME_IF_NEEDED]
#
# HOME_IF_NEEDED
#
# Perform a homing action only if one of the axes isn't homed.
#
description: Conditional home (i.e., home only if not homed already)
gcode:

    {% set verbose = params.VERBOSE|default(False) %}

    {% if not (('xy' in printer.toolhead.homed_axes) or ('z' in printer.toolhead.homed_axes)) %}
        {% if verbose %}
            { action_respond_info("Homing!") }
        {% endif %}
       G28

    {% endif %}

[gcode_macro M600]
gcode:
    #LCDRGB R=0 G=1 B=0  ; Turn LCD green
    PAUSE                ; Pause

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount
    
    {% if printer['pause_resume'].is_paused|int == 0 %}     
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro
                                
        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                                  ; disable filament sensor       
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume                
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error) 
        M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)
    
    {% if printer['pause_resume'].is_paused|int == 1 %}
        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1                          ; enable filament sensor
        #RESETRGB                                                                    ; reset LCD color
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)  
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}                                                
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}                      
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}                             
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        BASE_RESUME                                                                  ; resume print
    {% endif %}

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    PRINT_END
    BASE_CANCEL_PRINT

[gcode_macro M109]
rename_existing: M99109
gcode:
    #Parameters
    {% set s = params.S|float %}
    
    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  ; Set hotend temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}   ; Wait for hotend temp (within 1 degree)
    {% endif %}

[gcode_macro M190]
rename_existing: M99190
gcode:
    #Parameters
    {% set s = params.S|float %}

    M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}   ; Set bed temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s} MAXIMUM={s+1}  ; Wait for bed temp (within 1 degree)
    {% endif %}

[gcode_macro COOLDOWN] ;from ruiqimao#0001
gcode:
    CANCEL_COOLDOWN
    UPDATE_DELAYED_GCODE ID=COOLDOWN DURATION=5

[gcode_macro CANCEL_COOLDOWN] ;from ruiqimao#0001
gcode:
    UPDATE_DELAYED_GCODE ID=COOLDOWN DURATION=0

[delayed_gcode COOLDOWN] ;from ruiqimao#0001
initial_duration: 5
gcode:
  {% if printer["heater_bed"].temperature > 90 %}
    COOLDOWN
;  {% elif printer["heater_bed"].temperature > 45 %}
;  SET_FAN_SPEED FAN=zero_filter SPEED=1.0
;  G4 P750000 
 ; SET_FAN_SPEED FAN=zero_filter SPEED=0
   {% else %}
  SET_FAN_SPEED FAN=zero_filter SPEED=0
  {% endif %}


[gcode_macro INSTALL_SMOOTH_SHEET]
  gcode: 
   HOME_IF_NEEDED
   SET_GCODE_OFFSET Z_ADJUST=+0.07 MOVE=1
   Z_OFFSET_APPLY_ENDSTOP
[gcode_macro INSTALL_TEXTURED_SHEET]
  gcode: 
   HOME_IF_NEEDED
   SET_GCODE_OFFSET Z_ADJUST=-0.07 MOVE=1
   Z_OFFSET_APPLY_ENDSTOP

#########ZeroClick Macros ##############

[include klicky-bed-mesh-calibrate.cfg]
[include klicky-macros.cfg]
[include klicky-variables.cfg]
[include KAMP_Settings.cfg]
#[include klicky-z-tilt-adjust.cfg]


[gcode_macro FORCE_BED_DOWN]
description: Lower the bed 10mm without homing
gcode:
  G90
  SET_KINEMATIC_POSITION Z=0
  G0 Z15 F600 
  M84

[gcode_macro FORCE_BED_UP]
description: Lower the bed 10mm without homing
gcode:
  G90
  SET_KINEMATIC_POSITION Z=115
  G0 Z90 F600 
  M84


[homing_override]
axes: xyz
gcode:
  {% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}

  # Always drop to avoid hitting in XY.
 #UNSAFE_MOVE_XZ

  {% if home_all or 'X' in params %}
   #SET_KINEMATIC_POSITION Y=120
    
   _HOME_X
  
  {% endif %}
  
  {% if home_all or 'Y' in params %}
    _HOME_Y  
   G1 Y-15 F1200 ; move Y to clear Z rail in case probe is attached
   _HOME_Y
   G1 Y-15 F1200 ; move Y to clear Z rail in case probe is attached
   
   
    # Try to clear the rails, for the case where the ZeroClick probe is somehow still attached.
  
  {% endif %}
  
  {% if home_all or 'Z' in params %}
    DOCK_PROBE
    ATTACH_PROBE
    G90
    G1 X60 Y60 F12000
    G28 Z
    G91
    G1 Z3
    DOCK_PROBE
  {% endif %}

[gcode_macro SAVE_OFFSET]
gcode: 
  Z_OFFSET_APPLY_PROBE ; saves babystepping value to probe Z offset



